----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\.air.toml -----
root = "."
testdata_dir = "testdata"
tmp_dir = "bin"
[build]
args_bin = []
bin = "./bin/main.exe"  
cmd = "go build -o ./bin/main.exe ./cmd/api"  
delay = 1000
exclude_dir = ["assets", "bin", "vendor", "testdata", "web", "docs", "script"]
exclude_file = []
exclude_regex = ["_test.go"]
exclude_unchanged = false
follow_symlink = false
full_bin = ""
include_dir = []
include_ext = ["go", "tpl", "tmpl", "html"]
include_file = []
kill_delay = "0s"
log = "build-errors.log"
poll = false
poll_interval = 0
post_cmd = []
pre_cmd = []
rerun = false
rerun_delay = 500
send_interrupt = false
stop_on_error = false
[color]
app = ""
build = "yellow"
main = "magenta"
runner = "green"
watcher = "cyan"
[log]
main_only = false
silent = false
time = false
[misc]
clean_on_exit = false
[proxy]
app_port = 0
enabled = false
proxy_port = 0
[screen]
clear_on_rebuild = false
keep_scroll = true

----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\docker-compose.yml -----
version: '3.8'
services:
  db:
    image: postgres:16.3
    container_name: postgres-db
    environment:
      POSTGRES_DB: network
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin_password
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
volumes:
  db-data:


----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\go.mod -----
module github.com/dimbo1324/Base-Go-API-Engine

go 1.24.1

require github.com/go-chi/chi/v5 v5.2.1

require github.com/lib/pq v1.10.9


----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\go.sum -----
github.com/go-chi/chi/v5 v5.2.1 h1:KOIHODQj58PmL80G2Eak4WdvUzjSJSm0vG72crDCqb8=
github.com/go-chi/chi/v5 v5.2.1/go.mod h1:L2yAIGWB3H+phAw1NxKwWM+7eUH/lU8pOMm5hHcoops=
github.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=
github.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=


----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\.vscode\settings.json -----
{
    "BracketHighlighter.enableExtension": true
}

----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\bin\main.exe -----
Ошибка чтения файла: 'utf-8' codec can't decode byte 0x90 in position 2: invalid start byte

----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\cmd\api\main.go -----
package main

import (
	"log"

	"github.com/dimbo1324/Base-Go-API-Engine/cmd/api/components"
	"github.com/dimbo1324/Base-Go-API-Engine/internal/config"
	"github.com/dimbo1324/Base-Go-API-Engine/internal/db"
	"github.com/dimbo1324/Base-Go-API-Engine/internal/env"
	"github.com/dimbo1324/Base-Go-API-Engine/internal/store"
)

func main() {
	cfg := components.Config{
		Addr: env.GetString(config.ADDR, config.PORT),
		DB: components.DBConfig{
			Addr:            env.GetString(config.DB_ADDR, config.DB_WAY),
			MaxOpenConns:    env.GetInt(config.OPEN, config.OPEN_VAL),
			MaxIdleConns:    env.GetInt(config.IDLE, config.IDLE_VAL),
			MaxIdleTimeMins: env.GetString(config.IDLE_TIME, config.IDLE_TIME_VAL),
		},
	}
	db, err := db.New(cfg.DB.Addr, cfg.DB.MaxOpenConns, cfg.DB.MaxIdleConns, cfg.DB.MaxIdleTimeMins)
	if err != nil {
		log.Panic(err)
	}
	store := store.NewStorage(db)
	app := &components.Application{
		Config: cfg,
		Store:  store,
	}
	mux := app.Mount()
	log.Fatal(app.Run(mux))
}


----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\cmd\api\components\methods.go -----
package components

import (
	"log"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
)

func (app *Application) Mount() *chi.Mux {
	r := chi.NewRouter()
	r.Use(middleware.RequestID)
	r.Use(middleware.RealIP)
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Timeout(60 * time.Second))
	r.Route("/v1", func(r chi.Router) {
		r.Get("/status", app.statusCheckHandler)
	})
	return r
}
func (a *Application) Run(mux *chi.Mux) error {
	srv := &http.Server{
		Addr:         a.Config.Addr,
		Handler:      mux,
		WriteTimeout: time.Second * 30,
		ReadTimeout:  time.Second * 10,
		IdleTimeout:  time.Minute,
	}
	log.Printf("Сервер запущен на %s", a.Config.Addr)
	return srv.ListenAndServe()
}
func (a *Application) statusCheckHandler(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("OK: it works"))
}


----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\cmd\api\components\types.go -----
package components

import "github.com/dimbo1324/Base-Go-API-Engine/internal/store"

type DBConfig struct {
	Addr            string
	MaxOpenConns    int
	MaxIdleConns    int
	MaxIdleTimeMins string
}
type Config struct {
	Addr string
	DB   DBConfig
}
type Application struct {
	Config Config
	Store  store.Storage
}


----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\internal\config\config.go -----
package config

const (
	PORT          string = ":8080"
	ADDR          string = "ADDR"
	DB_ADDR       string = "DB_ADDR"
	DB_WAY        string = "postgres://admin:admin_password@localhost/network?sslmode=disable"
	OPEN          string = "DB_MAX_OPEN_CONNS"
	IDLE          string = "DB_MAX_IDLE_CONNS"
	IDLE_TIME     string = "DB_MAX_IDLE_TIME_MINS"
	OPEN_VAL      int    = 100
	IDLE_VAL      int    = 100
	IDLE_TIME_VAL string = "15m"
	QUERY_STR     string = `INSERT INTO posts (user_id, title, content) VALUES ($1, $2, $3, $4) returning id, created_at, updated_at`
)


----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\internal\db\db.go -----
package db

import (
	"context"
	"database/sql"
	"time"
)

func New(addr string, maxOpenConns, maxIdleConns int, maxIdleTime string) (*sql.DB, error) {
	db, err := sql.Open("postgres", addr)
	if err != nil {
		return nil, err
	}
	db.SetMaxOpenConns(maxOpenConns)
	db.SetMaxIdleConns(maxIdleConns)
	duration, err := time.ParseDuration(maxIdleTime)
	if err != nil {
		return nil, err
	}
	db.SetConnMaxIdleTime(duration)
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err = db.PingContext(ctx); err != nil {
		return nil, err
	}
	return db, nil
}


----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\internal\env\env.go -----
package env

import (
	"os"
	"strconv"
)

func GetString(key, fallBack string) string {
	val, ok := os.LookupEnv(key)
	if !ok {
		return fallBack
	}
	return val
}
func GetInt(key string, fallBack int) int {
	val, ok := os.LookupEnv(key)
	if !ok {
		return fallBack
	}
	valAsInt, err := strconv.Atoi(val)
	if err != nil {
		return fallBack
	}
	return valAsInt
}


----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\internal\store\posts.go -----
package store

import (
	"context"

	"github.com/dimbo1324/Base-Go-API-Engine/internal/config"
	"github.com/lib/pq"
)

func (s *PostStore) Create(ctx context.Context, post *Post) error {
	query := config.QUERY_STR
	err := s.db.QueryRowContext(
		ctx,
		query,
		post.UserId,
		post.Title,
		post.Content,
		pq.Array(post.Tags),
	).Scan(
		&post.Id,
		&post.CreatedAt,
		&post.UpdatedAt,
	)
	if err != nil {
		return err
	}
	return nil
}


----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\internal\store\storage.go -----
package store

import (
	"database/sql"
)

func NewStorage(db *sql.DB) Storage {
	return Storage{
		Posts: &PostStore{db},
		Users: &UsersStore{db},
	}
}


----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\internal\store\types.go -----
package store

import (
	"context"
	"database/sql"
)

type PostStore struct {
	db *sql.DB
}
type Post struct {
	Id        int64    `json:"id"`
	UserId    int64    `json:"user_id"`
	Content   string   `json:"content"`
	Title     string   `json:"title"`
	CreatedAt string   `json:"created_at"`
	UpdatedAt string   `json:"updated_at"`
	Tags      []string `json:"tags"`
}
type Storage struct {
	Posts interface {
		Create(context.Context, *Post) error
	}
	Users interface {
		Create(context.Context) error
	}
}
type UsersStore struct {
	db *sql.DB
}


----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\internal\store\users.go -----
package store

import (
	"context"
)

func (s *UsersStore) Create(ctx context.Context) error {
	return nil
}


----- Файл: C:\Users\dim4d\Desktop\Base-Go-API-Engine\scripts\initDb.sql -----
CREATE DATABASE network;

PS C:\Users\dim4d\Desktop\Base-Go-API-Engine> air   

  __    _   ___  
 / /\  | | | |_) 
/_/--\ |_| |_| \_ v1.61.7, built with Go go1.24.1

watching .
!exclude bin
watching cmd
watching cmd\api
watching cmd\api\components
watching cmd\migrate
watching cmd\migrate\migrations
watching internal
watching internal\config
watching internal\db
watching internal\env
watching internal\store
watching scripts
building...
!exclude .git
!exclude .git
running...
2025/04/08 20:40:18 pq: ������������ "admin" �� ������ �������� ����������� (�� ������)
panic: pq: ������������ "admin" �� ������ �������� ����������� (�� ������)

goroutine 1 [running]:
log.Panic({0xc0000f9f30?, 0x15?, 0x64?})
        C:/Program Files/Go/src/log/log.go:432 +0x5a
main.main()
        C:/Users/dim4d/Desktop/Base-Go-API-Engine/cmd/api/main.go:25 +0x16f
Process Exit with Code: 2
